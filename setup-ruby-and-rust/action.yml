---
name: "Setup Ruby and Rust"
description: "Download a prebuilt Ruby and add it to the PATH in 5 seconds"
author: "Ian Ker-Seymer"
branding:
  icon: "download"
  color: "gray-dark"
inputs:
  ruby-version:
    description: "Engine and version to use, see the syntax in the README. Reads from .ruby-version or .tool-versions if unset."
    default: "default"
  bundler-cache:
    description: 'Run "bundle install", and cache the result automatically. Either true or false.'
    default: "false"
  working-directory:
    description: "The working directory to use for resolving paths for .ruby-version, .tool-versions and Gemfile.lock."
  cache-version:
    default: "v0"
    description: |
      Arbitrary string that will be added to the cache key of the bundler cache. Set or change it if you need
      to invalidate the cache.
  rustup-toolchain:
    description: |
      Rustup toolchain specifier e.g. stable, nightly, 1.42.0, nightly-2022-01-01.
    default: stable
  rustup-targets:
    description: |
      Comma-separated string of additional targets to install e.g. wasm32-unknown-unknown
    default: ""
  rustup-components:
    description: |
      Comma-separated string of additional components to install e.g. clippy, rustfmt
    default: clippy, rustfmt
  cargo-cache:
    description: "Automatically cache the target dir and Cargo registry index"
    default: "false"
  cargo-cache-extra-path:
    description: "Paths to cache for cargo and gem compilation"
  cargo-vendor:
    description: "Vendor cargo dependencies to avoid repeated downloads"
    default: "false"
  debug:
    description: "Enable verbose debugging info (includes summary of action)"
    default: "false"
  prefer-ruby-static:
    description: "Prefer using libruby static if it's available"
    default: "false"
outputs:
  ruby-prefix:
    description: "The prefix of the installed ruby"
    value: ${{ steps.set-outputs.outputs.ruby-prefix }}
  ruby-arch:
    description: "The arch of the installed ruby"
    value: ${{ steps.set-outputs.outputs.ruby-arch }}
  cache-key:
    description: "Derived cache key for the current environment"
    value: ${{ steps.set-outputs.outputs.cache-key }}
runs:
  using: "composite"
  steps:
    - uses: "ruby/setup-ruby-pkgs@v1"
      with:
        ruby-version: ${{ inputs.ruby-version }}
        bundler-cache: ${{ inputs.bundler-cache }}
        working-directory: ${{ inputs.working-directory }}
        cache-version: ${{ inputs.cache-version }}
        mingw: clang

    - name: Install helpers
      shell: bash
      run: |
        echo "$GITHUB_ACTION_PATH/bin" >> $GITHUB_PATH

    - name: Print rbconfig
      shell: bash
      run: |
        echo "::group::Print rbconfig below"
        rbconfig
        echo "::endgroup::"

    - uses: dtolnay/rust-toolchain@master
      id: rust-toolchain
      with:
        toolchain: ${{ (runner.os == 'Windows' && format('{0}-x86_64-pc-windows-gnu', inputs.rustup-toolchain)) || inputs.rustup-toolchain }}
        targets: ${{ inputs.rustup-targets }}
        components: ${{ inputs.rustup-components }}

    - name: Set outputs
      id: set-outputs
      shell: bash
      run: |
        echo "ruby-prefix=$(rbconfig prefix)" >> $GITHUB_OUTPUT
        echo "ruby-arch=$(rbconfig arch)" >> $GITHUB_OUTPUT
        echo "cache-key=setup-ruby-and-ruby-${{ inputs.cache-version }}-ruby-$(rbconfig arch)-$(rbconfig ruby_version)-rust-${{ steps.rust-toolchain.outputs.cachekey }}-${{ hashFiles('**/Cargo.lock', '**/extconf.rb', '**/Gemfile.lock') }}" >> $GITHUB_OUTPUT

    - name: Setup cargo cache
      uses: actions/cache@v3
      if: inputs.cargo-cache == 'true'
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          **/target/
          **/tmp/${{ steps.set-outputs.outputs.ruby-arch }}/
          ${{ inputs.cargo-cache-extra-path }}
        key: ${{ steps.set-outputs.outputs.cache-key }}

    # Enable when mswin is supported
    # - name: Fixup paths
    #   if: runner.os == 'Windows'
    #   shell: pwsh
    #   working-directory: ${{ inputs.working-directory }}
    #   run: |
    #     echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV

    - name: Fix LD_LIBRARY_PATH for Ruby
      if: runner.os == 'Linux'
      shell: bash
      run: |
        echo "::group::Adding Ruby libdir to LD_LIBRARY_PATH"
        libdir="$(rbconfig libdir)"
        echo "Ruby libdir is $libdir"

        if [ ! -z "$LD_LIBRARY_PATH" ]; then
          echo "Appending to LD_LIBRARY_PATH"
          echo "LD_LIBRARY_PATH=$libdir:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        else
          echo "Setting new LD_LIBRARY_PATH"
          echo "LD_LIBRARY_PATH=$libdir" >> $GITHUB_ENV
        fi
        echo "::endgroup::"

    - name: Vendoring cargo dependencies
      if: inputs.cargo-vendor == 'true'
      shell: bash
      run: |
        echo "::group::Vendoring cargo deps"
        [ "${{ inputs.working-directory }}" != "" ] && pushd "${{ inputs.working-directory }}"
        mkdir -p .cargo tmp && cargo vendor "$PWD/tmp/cargo-vendor" >> .cargo/config.toml
        [ "${{ inputs.working-directory }}" != "" ] && popd
        echo "::endgroup::"

    - name: Configure environment
      shell: bash
      run: |
        echo "::group::Configuring environment"

        if [ "${{ inputs.debug }}" = "true" ]; then
          echo "Setting debug mode"
          echo "RB_SYS_DEBUG_BUILD=1" >> $GITHUB_ENV
        fi

        if [ "${{ inputs.prefer-ruby-static }}" = "true" ]; then
          echo "::group::Attempting to configure static libruby"
          libdir="$(rbconfig libdir)"
          libruby_a=$(rbconfig LIBRUBY_A || echo notfound)
          if [ -f "$libdir/$libruby_a" ]; then
            echo "Found LIBRUBY_A in libdir"
            echo "RUBY_STATIC=1" >> $GITHUB_ENV
          else
            echo "Could not find $libruby_a in libdir, files were:"
            ls $libdir
            echo "Current LIBRUBYARG_STATIC: $(rbconfig LIBRUBYARG_STATIC || echo unknown)"
          fi
          echo "::endgroup::"
        fi

        echo "::endgroup::"
